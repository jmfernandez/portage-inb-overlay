diff -Nru a/config.h.in b/config.h.in
--- a/config.h.in	2021-03-21 01:18:51.000000000 +0100
+++ b/config.h.in	2021-05-07 16:29:32.491876234 +0200
@@ -160,6 +160,9 @@
 /* Define this if you have libsystemd. */
 #undef HAVE_LIBSYSTEMD
 
+/* Define this if you have libelogind. */
+#undef HAVE_LIBELOGIND
+
 /* Define to 1 if you have the <locale.h> header file. */
 #undef HAVE_LOCALE_H
 
diff -Nru a/configure.ac b/configure.ac
--- a/configure.ac	2021-03-31 04:59:15.000000000 +0200
+++ b/configure.ac	2021-05-07 16:28:29.836879919 +0200
@@ -126,6 +126,9 @@
 AH_TEMPLATE([HAVE_LIBSYSTEMD],
 	    [Define this if you have libsystemd.])
 
+AH_TEMPLATE([HAVE_LIBELOGIND],
+	    [Define this if you have libelogind.])
+
 AH_TEMPLATE([HAVE_PROC_INTERRUPTS],
 	    [Define this if you have a Linux-like /proc/interrupts file which
 	    can be examined to determine when keyboard activity has
@@ -2135,6 +2138,91 @@
 else
   EXES_SYSTEMD=''
   SYSTEMD_LIBS=''
+fi
+
+
+###############################################################################
+#
+#       Check for -lelogind
+#
+###############################################################################
+
+have_elogind=no
+with_elogind_req=unspecified
+elogind_halfassed=no
+elogind_too_old=no
+AC_ARG_WITH(elogind,
+[  --with-elogind          Support elogind requests to lock on suspend, and to
+                          allow video players to inhibit the screen saver.],
+  [with_elogind="$withval"; with_elogind_req="$withval"],
+  [with_elogind=yes])
+
+HANDLE_X_PATH_ARG(with_elogind, --with-elogind, elogind)
+
+if test "$with_elogind" != yes -a "$with_elogind" != no ; then
+  echo "error: must be yes or no: --with-elogind=$with_elogind"
+  exit 1
+fi
+
+if test "$with_elogind" = yes; then
+
+  pkgs=''
+  ok="yes"
+  pkg_check_version libelogind 221
+  have_elogind="$ok"
+
+  if test "$have_elogind" = no; then
+    if $pkg_config --exists libelogind ; then
+      elogind_too_old=yes
+    fi
+  fi
+
+  if test "$have_elogind" = yes; then
+    AC_CACHE_CHECK([for libelogind includes], ac_cv_elogind_config_cflags,
+               [ac_cv_elogind_config_cflags=`$pkg_config --cflags $pkgs`])
+    AC_CACHE_CHECK([for libelogind libs], ac_cv_elogind_config_libs,
+               [ac_cv_elogind_config_libs=`$pkg_config --libs $pkgs`])
+  fi
+
+  ac_elogind_config_cflags=$ac_cv_elogind_config_cflags
+  ac_elogind_config_libs=$ac_cv_elogind_config_libs
+
+  if test "$have_elogind" = yes; then
+    #
+    # we appear to have libelogind; check for headers/libs to be sure.
+    #
+    ac_save_elogind_CPPFLAGS="$CPPFLAGS"
+    CPPFLAGS="$CPPFLAGS $ac_elogind_config_cflags"
+
+    have_elogind=no
+    AC_CHECK_X_HEADER(elogind/sd-bus.h, [have_elogind=yes])
+
+    CPPFLAGS="$ac_save_elogind_CPPFLAGS"
+  fi
+
+  if test "$have_elogind" = yes; then
+    # we have the headers, now check for the libraries
+    have_elogind=no
+    elogind_halfassed=yes
+    AC_MSG_RESULT(checking for libelogind usability...)
+    AC_CHECK_X_LIB(c, sd_bus_open_system,
+                   [have_elogind=yes; elogind_halfassed=no],,
+                   $ac_elogind_config_libs -lX11 -lXext -lm)
+  fi
+
+  if test "$have_elogind" = no; then
+    AC_MSG_RESULT(checking for libelogind usability... no)
+  fi
+fi
+
+if test "$have_elogind" = yes; then
+  INCLUDES="$INCLUDES $ac_elogind_config_cflags"
+  EXES_SYSTEMD='$(EXES_SYSTEMD)'
+  SYSTEMD_LIBS="$ac_elogind_config_libs"
+  AC_DEFINE(HAVE_LIBELOGIND)
+else
+  EXES_SYSTEMD=''
+  SYSTEMD_LIBS=''
 fi
 
 
diff -Nru a/driver/exts.c b/driver/exts.c
--- a/driver/exts.c	2021-03-10 17:38:42.000000000 +0100
+++ b/driver/exts.c	2021-05-07 17:05:23.549749735 +0200
@@ -191,7 +191,11 @@
 # ifdef HAVE_LIBSYSTEMD
   fprintf (stderr, "%s:   libsystemd\n", blurb());
 # else
-  fprintf (stderr, "%s:   libsystemd (disabled at compile time)\n", blurb());
+# ifdef HAVE_LIBELOGIND
+  fprintf (stderr, "%s:   libelogind\n", blurb());
+# else
+  fprintf (stderr, "%s:   libsystemd and libelogind (disabled at compile time)\n", blurb());
+# endif
 # endif
 
   for (i = 0; i < si->nscreens; i++)
diff -Nru a/driver/xscreensaver.c b/driver/xscreensaver.c
--- a/driver/xscreensaver.c	2021-03-28 18:09:58.000000000 +0200
+++ b/driver/xscreensaver.c	2021-05-07 17:15:38.667713561 +0200
@@ -1402,7 +1402,7 @@
     saver_auth_pid = fork_and_exec (dpy, ac, av);
   }
 
-# ifdef HAVE_LIBSYSTEMD
+# if defined(HAVE_LIBSYSTEMD) || defined(HAVE_LIBELOGIND) 
   /* Launch xscreensaver-systemd at startup. */
   {
     char *av[10];
@@ -1413,7 +1413,7 @@
     av[ac] = 0;
     saver_systemd_pid = fork_and_exec (dpy, ac, av);
   }
-# endif /* HAVE_LIBSYSTEMD */
+# endif /* HAVE_LIBSYSTEMD || HAVE_LIBELOGIND */
 
 
   /* X11 errors during startup initialization were fatal.
diff -Nru a/driver/xscreensaver-systemd.c b/driver/xscreensaver-systemd.c
--- a/driver/xscreensaver-systemd.c	2021-03-14 04:51:18.000000000 +0100
+++ b/driver/xscreensaver-systemd.c	2021-05-07 16:30:50.612871640 +0200
@@ -294,7 +294,13 @@
 #include <signal.h>
 #include <X11/Xlib.h>
 
+#ifdef HAVE_LIBSYSTEMD
 #include <systemd/sd-bus.h>
+#endif
+
+#ifdef HAVE_LIBELOGIND
+#include <elogind/sd-bus.h>
+#endif
 
 #include "version.h"
 #include "blurb.h"
